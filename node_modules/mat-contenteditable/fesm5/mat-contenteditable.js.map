{"version":3,"file":"mat-contenteditable.js","sources":["ng://mat-contenteditable/lib/mat-contenteditable.directive.ts","ng://mat-contenteditable/lib/mat-ckeditor.directive.ts","ng://mat-contenteditable/lib/mat-ckeditor-balloon.directive.ts","ng://mat-contenteditable/lib/form-field-sizer.directive.ts","ng://mat-contenteditable/lib/mat-contenteditable.module.ts","ng://mat-contenteditable/lib/mat-ckeditor.module.ts","ng://mat-contenteditable/lib/validators.ts","ng://mat-contenteditable/public_api.ts","ng://mat-contenteditable/mat-contenteditable.ts"],"sourcesContent":["import {\n  Directive,\n  ElementRef,\n  Renderer2,\n  HostListener,\n  Input,\n  HostBinding,\n  Optional,\n  Self,\n  DoCheck,\n} from '@angular/core';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher, mixinErrorState, CanUpdateErrorStateCtor, CanUpdateErrorState } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs';\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n  mixinErrorState(MatInputBase);\n\n\n@Directive({\n  selector: '[contenteditable]',\n  providers: [\n    { provide: MatFormFieldControl, useExisting: MatContenteditableDirective },\n  ]\n})\nexport class MatContenteditableDirective extends _MatInputMixinBase\n  implements ControlValueAccessor, MatFormFieldControl<string>, DoCheck, CanUpdateErrorState {\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * See https://material.angular.io/guide/creating-a-custom-form-field-control\n   */\n  static nextId = 0;\n\n  @Input()\n  get value(): string { return this.elementRef.nativeElement[this.propValueAccessor]; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this.elementRef.nativeElement[this.propValueAccessor] = value;\n      this.stateChanges.next();\n    }\n  }\n\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  @HostBinding() id = `mat-input-${MatContenteditableDirective.nextId++}`;\n\n  @Input()\n  get placeholder() {\n    return this._placeholder;\n  }\n  set placeholder(plh) {\n    this._placeholder = plh;\n    this.stateChanges.next();\n  }\n  private _placeholder: string;\n\n  focused = false;\n\n  @Input() contentEmpty: Array<string> = ['<br>', '<div><br></div>'];\n  get empty(): boolean {\n    return !this.value || this.contentEmpty.includes(this.value);\n  }\n\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  @Input()\n  get required() {\n    return this._required;\n  }\n  set required(req) {\n    this._required = coerceBooleanProperty(req);\n    this.stateChanges.next();\n  }\n  private _required = false;\n\n  @Input()\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(dis) {\n    this._disabled = coerceBooleanProperty(dis);\n    this.stateChanges.next();\n  }\n  private _disabled = false;\n\n  @HostBinding('attr.aria-invalid') errorState: boolean;\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  controlType = 'mat-input';\n\n  @HostBinding('attr.aria-describedby') describedBy = '';\n\n\n  // Part of ControlValueAccessor\n  private onChange: (value: string) => void;\n  private onTouched: () => void;\n  private removeDisabledState: () => void;\n\n  @Input() propValueAccessor = 'innerHTML';\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n  ) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // Setting the value accessor directly (instead of using\n    // the providers) to avoid running into a circular import.\n    if (this.ngControl != null) { this.ngControl.valueAccessor = this; }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  @HostListener('input')\n  callOnChange() {\n    if (typeof this.onChange === 'function') {\n      this.onChange(this.elementRef.nativeElement[this.propValueAccessor]);\n    }\n  }\n\n  @HostListener('focus')\n  callOnFocused() {\n    if (this.focused !== true) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  @HostListener('blur')\n  callOnTouched() {\n    if (typeof this.onTouched === 'function') {\n      this.onTouched();\n    }\n    if (this.focused !== false) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  setDescribedByIds(ids: string[]) {\n    this.describedBy = ids.join(' ');\n  }\n\n  onContainerClick() { this.elementRef.nativeElement.focus(); }\n\n  /**\n   * Writes a new value to the element.\n   * This method will be called by the forms API to write\n   * to the view when programmatic (model -> view) changes are requested.\n   *\n   * See: [ControlValueAccessor](https://angular.io/api/forms/ControlValueAccessor#members)\n   */\n  writeValue(value: any): void {\n    const normalizedValue = value == null ? '' : value;\n    this.renderer.setProperty(this.elementRef.nativeElement, this.propValueAccessor, normalizedValue);\n  }\n\n  /**\n   * Registers a callback function that should be called when\n   * the control's value changes in the UI.\n   *\n   * This is called by the forms API on initialization so it can update\n   * the form model when values propagate from the view (view -> model).\n   */\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Registers a callback function that should be called when the control receives a blur event.\n   * This is called by the forms API on initialization so it can update the form model on blur.\n   */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * This function is called by the forms API when the control status changes to or from \"DISABLED\".\n   * Depending on the value, it should enable or disable the appropriate DOM element.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    if (isDisabled) {\n      this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'true');\n      this.removeDisabledState = this.renderer.listen(this.elementRef.nativeElement, 'keydown', this.listenerDisabledState);\n    } else {\n      if (this.removeDisabledState) {\n        this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');\n        this.removeDisabledState();\n      }\n    }\n  }\n\n  private listenerDisabledState(e: KeyboardEvent) {\n    e.preventDefault();\n  }\n}\n","import { Directive, Input, HostBinding, ViewContainerRef, OnInit, Optional, Self, DoCheck, Host } from '@angular/core';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { CKEditorComponent } from '@ckeditor/ckeditor5-angular';\nimport { Subject } from 'rxjs';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { CanUpdateErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { _MatInputMixinBase } from './mat-contenteditable.directive';\n\n\n@Directive({\n  selector: '[matCkeditor]',\n  providers: [\n    { provide: MatFormFieldControl, useExisting: MatCkeditorDirective },\n  ]\n})\nexport class MatCkeditorDirective  extends _MatInputMixinBase\n  implements MatFormFieldControl<string>, DoCheck, CanUpdateErrorState , OnInit {\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * See https://material.angular.io/guide/creating-a-custom-form-field-control\n   */\n  static nextId = 0;\n\n  @Input()\n  get value(): string {\n    return !!this.editor.editorInstance && this.editor.editorInstance.getData();\n  }\n  set value(value: string) {\n    if (value !== this.value) {\n      this.editor.data = value;\n      this.stateChanges.next();\n    }\n  }\n\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  @HostBinding() id = `mat-input-${MatCkeditorDirective.nextId++}`;\n\n  // Need support from Ckeditor\n  @Input() placeholder = '';\n\n  @Input() contentEmpty: string[] = ['<br>', '<p>&nbsp;</p>'];\n  get empty(): boolean {\n    return !this.value || this.contentEmpty.includes(this.value);\n  }\n\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  focused = false;\n\n  @Input() required = false;\n\n  @Input()\n  set disabled(isDisabled: boolean) {\n    this.editor.setDisabledState(isDisabled);\n    this.stateChanges.next();\n  }\n  get disabled() {\n    return this.editor.disabled;\n  }\n\n  @HostBinding('attr.aria-invalid') errorState: boolean;\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  controlType = 'mat-input';\n\n  @HostBinding('attr.aria-describedby') describedBy = '';\n\n  constructor(\n    @Host() @Self() @Optional() public editor: CKEditorComponent,\n    protected readonly viewRef: ViewContainerRef,\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n  ) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n  }\n\n  ngOnInit() {\n    this.editor.blur.subscribe(() => {\n      this.focused = false;\n      this.stateChanges.next();\n    });\n    this.editor.focus.subscribe(() => {\n      this.focused = true;\n      this.stateChanges.next();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  setDescribedByIds(ids: string[]) {\n    this.describedBy = ids.join(' ');\n  }\n\n  onContainerClick() {\n    if (this.editor.editorInstance) {\n      this.editor.editorInstance.editing.view.focus();\n      this.stateChanges.next();\n    }\n  }\n\n}\n","import { Directive, Input } from '@angular/core';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\nimport { MatCkeditorDirective } from './mat-ckeditor.directive';\n\n@Directive({\n  selector: '[matCkeditorBalloon]',\n  providers: [\n    { provide: MatFormFieldControl, useExisting: MatCkeditorBalloonDirective },\n  ]\n})\nexport class MatCkeditorBalloonDirective extends MatCkeditorDirective {\n\n  @Input()\n  set toolbar(show: boolean) {\n    if (this.editor && show !== this.toolbarOpen) {\n      const balloon = this.editor.editorInstance.plugins.get('BalloonToolbar');\n      if (show) {\n        this.showToolbar(balloon);\n      } else {\n        balloon.hide();\n        this.toolbarOpen = false;\n      }\n    }\n  }\n  private toolbarOpen: boolean;\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.editor.ready.subscribe(editor => {\n      const balloon = editor.plugins.get('BalloonToolbar');\n      balloon.stopListening(editor.model.document.selection, 'change:range');\n      balloon.stopListening(balloon, '_selectionChangeDebounced');\n    });\n    this.editor.focus.subscribe(() => {\n      if (this.toolbarOpen) {\n        const balloon = this.editor.editorInstance.plugins.get('BalloonToolbar');\n        this.showToolbar(balloon);\n      }\n    });\n  }\n\n  private showToolbar(balloon) {\n    if (!balloon._balloon.hasView(balloon.toolbarView)) {\n      balloon.listenTo(this.editor.editorInstance.ui, 'update', () => {\n        balloon._balloon.updatePosition(balloon._getBalloonPositionData());\n      });\n      balloon._balloon.add({\n        view: balloon.toolbarView,\n        position: balloon._getBalloonPositionData(),\n        balloonClassName: 'ck-toolbar-container'\n      });\n      this.toolbarOpen = true;\n    }\n  }\n\n}\n","import { Directive, Renderer2, ElementRef, AfterContentInit } from '@angular/core';\n\n@Directive({\n  selector: '[formFieldSizer]'\n})\nexport class FormFieldSizerDirective implements AfterContentInit {\n\n  constructor(\n    private readonly renderer: Renderer2,\n    private readonly elementRef: ElementRef,\n  ) { }\n\n  ngAfterContentInit(): void {\n    this.updateSize();\n  }\n\n  updateSize() {\n    const infix = this.getElement('mat-form-field-infix');\n    this.renderer.removeStyle(infix, 'min-height');\n\n    setTimeout(() => {\n      const wrapper = this.getElement('mat-form-field-wrapper');\n      const offset = this.elementRef.nativeElement.offsetHeight -\n        wrapper.offsetHeight -\n        parseFloat(getComputedStyle(wrapper).marginTop) -\n        parseFloat(getComputedStyle(wrapper).marginBottom) +\n        parseFloat(getComputedStyle(infix).height);\n\n      this.renderer.setStyle(infix, 'min-height', `${offset}px`);\n    });\n  }\n\n  private getElement(name: string): HTMLElement {\n    return this.elementRef.nativeElement.getElementsByClassName(name).item(0);\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { MatContenteditableDirective } from './mat-contenteditable.directive';\nimport { FormFieldSizerDirective } from './form-field-sizer.directive';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [ MatContenteditableDirective, FormFieldSizerDirective ],\n  exports: [ MatContenteditableDirective, FormFieldSizerDirective ],\n})\nexport class MatContenteditableModule { }\n","import { NgModule } from '@angular/core';\n\nimport { MatCkeditorDirective } from './mat-ckeditor.directive';\nimport { MatCkeditorBalloonDirective } from './mat-ckeditor-balloon.directive';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [ MatCkeditorDirective, MatCkeditorBalloonDirective ],\n  exports: [ MatCkeditorDirective, MatCkeditorBalloonDirective ],\n})\nexport class MatCkeditorModule { }\n","import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\n\nfunction getText(html: string) {\n  if (html) {\n    const element = document.createElement('span');\n    element.innerHTML = html;\n    return element.textContent.replace(/\\s/g, '');\n  }\n  return '';\n}\n\n/**\n * @description\n * Provides a set of built-in validators that can be used by form controls.\n *\n * A validator is a function that processes a `FormControl` or collection of\n * controls and returns an error map or null. A null map means that validation has passed.\n *\n * @see [Form Validation](/guide/form-validation)\n *\n * @publicApi\n */\nexport class HtmlValidators {\n\n  /**\n   * @description\n   * Validator that requires the control have a non-empty value.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field is non-empty\n   *\n   * ```typescript\n   * const control = new FormControl('', Validators.required);\n   *\n   * console.log(control.errors); // {required: true}\n   * ```\n   *\n   * @returns An error map with the `required` property\n   * if the validation check fails, otherwise `null`.\n   *\n   */\n  static required(control: AbstractControl): ValidationErrors | null {\n    const text = getText(control.value);\n    return text ? null : { 'required': true };\n  }\n\n  /**\n   * @description\n   * Validator that requires the length of the control's value to be greater than or equal\n   * to the provided minimum length. This validator is also provided by default if you use the\n   * the HTML5 `minlength` attribute.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field has a minimum of 3 characters\n   *\n   * ```typescript\n   * const control = new FormControl('ng', Validators.minLength(3));\n   *\n   * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}\n   * ```\n   *\n   * ```html\n   * <input minlength=\"5\">\n   * ```\n   *\n   * @returns A validator function that returns an error map with the\n   * `minlength` if the validation check fails, otherwise `null`.\n   */\n  static minLength(minLength: number): ValidatorFn {\n    const fn = (control: AbstractControl): ValidationErrors | null => {\n      const text = getText(control.value);\n      if (text) {\n        return text.length < minLength ?\n          { 'minlength': { 'requiredLength': minLength, 'actualLength': text.length } } :\n          null;\n      }\n      return null;  // don't validate empty values to allow optional controls\n    };\n    return fn;\n  }\n\n  /**\n   * @description\n   * Validator that requires the length of the control's value to be less than or equal\n   * to the provided maximum length. This validator is also provided by default if you use the\n   * the HTML5 `maxlength` attribute.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field has maximum of 5 characters\n   *\n   * ```typescript\n   * const control = new FormControl('Angular', Validators.maxLength(5));\n   *\n   * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}\n   * ```\n   *\n   * ```html\n   * <input maxlength=\"5\">\n   * ```\n   *\n   * @returns A validator function that returns an error map with the\n   * `maxlength` property if the validation check fails, otherwise `null`.\n   */\n  static maxLength(maxLength: number): ValidatorFn {\n    const fn = (control: AbstractControl): ValidationErrors | null => {\n      const text = getText(control.value);\n      return text.length > maxLength ?\n        { 'maxlength': { 'requiredLength': maxLength, 'actualLength': text.length } } :\n        null;\n    };\n    return fn;\n  }\n}\n","/*\n * Public API Surface of mat-contenteditable\n */\n\nexport * from './lib/mat-contenteditable.directive';\nexport * from './lib/mat-ckeditor.directive';\nexport * from './lib/mat-ckeditor-balloon.directive';\nexport * from './lib/form-field-sizer.directive';\nexport * from './lib/mat-contenteditable.module';\nexport * from './lib/mat-ckeditor.module';\nexport * from './lib/validators';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}