var MatCkeditorDirective_1;
import { __decorate, __metadata, __param } from "tslib";
import { Directive, Input, HostBinding, ViewContainerRef, OnInit, Optional, Self, DoCheck, Host } from '@angular/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { CKEditorComponent } from '@ckeditor/ckeditor5-angular';
import { Subject } from 'rxjs';
import { NgControl, NgForm, FormGroupDirective } from '@angular/forms';
import { CanUpdateErrorState, ErrorStateMatcher } from '@angular/material/core';
import { _MatInputMixinBase } from './mat-contenteditable.directive';
let MatCkeditorDirective = MatCkeditorDirective_1 = class MatCkeditorDirective extends _MatInputMixinBase {
    constructor(editor, viewRef, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher) {
        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);
        this.editor = editor;
        this.viewRef = viewRef;
        this.ngControl = ngControl;
        this.stateChanges = new Subject();
        this.id = `mat-input-${MatCkeditorDirective_1.nextId++}`;
        // Need support from Ckeditor
        this.placeholder = '';
        this.contentEmpty = ['<br>', '<p>&nbsp;</p>'];
        this.focused = false;
        this.required = false;
        this.controlType = 'mat-input';
        this.describedBy = '';
    }
    get value() {
        return !!this.editor.editorInstance && this.editor.editorInstance.getData();
    }
    set value(value) {
        if (value !== this.value) {
            this.editor.data = value;
            this.stateChanges.next();
        }
    }
    get empty() {
        return !this.value || this.contentEmpty.includes(this.value);
    }
    get shouldLabelFloat() { return this.focused || !this.empty; }
    set disabled(isDisabled) {
        this.editor.setDisabledState(isDisabled);
        this.stateChanges.next();
    }
    get disabled() {
        return this.editor.disabled;
    }
    ngOnInit() {
        this.editor.blur.subscribe(() => {
            this.focused = false;
            this.stateChanges.next();
        });
        this.editor.focus.subscribe(() => {
            this.focused = true;
            this.stateChanges.next();
        });
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
    }
    setDescribedByIds(ids) {
        this.describedBy = ids.join(' ');
    }
    onContainerClick() {
        if (this.editor.editorInstance) {
            this.editor.editorInstance.editing.view.focus();
            this.stateChanges.next();
        }
    }
};
/**
 * Implemented as part of MatFormFieldControl.
 * See https://material.angular.io/guide/creating-a-custom-form-field-control
 */
MatCkeditorDirective.nextId = 0;
MatCkeditorDirective.ctorParameters = () => [
    { type: CKEditorComponent, decorators: [{ type: Host }, { type: Self }, { type: Optional }] },
    { type: ViewContainerRef },
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
    { type: NgForm, decorators: [{ type: Optional }] },
    { type: FormGroupDirective, decorators: [{ type: Optional }] },
    { type: ErrorStateMatcher }
];
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], MatCkeditorDirective.prototype, "value", null);
__decorate([
    HostBinding(),
    __metadata("design:type", Object)
], MatCkeditorDirective.prototype, "id", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MatCkeditorDirective.prototype, "placeholder", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], MatCkeditorDirective.prototype, "contentEmpty", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MatCkeditorDirective.prototype, "required", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], MatCkeditorDirective.prototype, "disabled", null);
__decorate([
    HostBinding('attr.aria-invalid'),
    __metadata("design:type", Boolean)
], MatCkeditorDirective.prototype, "errorState", void 0);
__decorate([
    Input(),
    __metadata("design:type", ErrorStateMatcher)
], MatCkeditorDirective.prototype, "errorStateMatcher", void 0);
__decorate([
    HostBinding('attr.aria-describedby'),
    __metadata("design:type", Object)
], MatCkeditorDirective.prototype, "describedBy", void 0);
MatCkeditorDirective = MatCkeditorDirective_1 = __decorate([
    Directive({
        selector: '[matCkeditor]',
        providers: [
            { provide: MatFormFieldControl, useExisting: MatCkeditorDirective_1 },
        ]
    }),
    __param(0, Host()), __param(0, Self()), __param(0, Optional()),
    __param(2, Optional()), __param(2, Self()),
    __param(3, Optional()),
    __param(4, Optional()),
    __metadata("design:paramtypes", [CKEditorComponent,
        ViewContainerRef,
        NgControl,
        NgForm,
        FormGroupDirective,
        ErrorStateMatcher])
], MatCkeditorDirective);
export { MatCkeditorDirective };
//# sourceMappingURL=data:application/json;base64,