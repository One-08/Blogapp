import { __decorate, __extends, __metadata, __param } from "tslib";
import { Directive, Input, HostBinding, ViewContainerRef, OnInit, Optional, Self, DoCheck, Host } from '@angular/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { CKEditorComponent } from '@ckeditor/ckeditor5-angular';
import { Subject } from 'rxjs';
import { NgControl, NgForm, FormGroupDirective } from '@angular/forms';
import { CanUpdateErrorState, ErrorStateMatcher } from '@angular/material/core';
import { _MatInputMixinBase } from './mat-contenteditable.directive';
var MatCkeditorDirective = /** @class */ (function (_super) {
    __extends(MatCkeditorDirective, _super);
    function MatCkeditorDirective(editor, viewRef, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher) {
        var _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;
        _this.editor = editor;
        _this.viewRef = viewRef;
        _this.ngControl = ngControl;
        _this.stateChanges = new Subject();
        _this.id = "mat-input-" + MatCkeditorDirective_1.nextId++;
        // Need support from Ckeditor
        _this.placeholder = '';
        _this.contentEmpty = ['<br>', '<p>&nbsp;</p>'];
        _this.focused = false;
        _this.required = false;
        _this.controlType = 'mat-input';
        _this.describedBy = '';
        return _this;
    }
    MatCkeditorDirective_1 = MatCkeditorDirective;
    Object.defineProperty(MatCkeditorDirective.prototype, "value", {
        get: function () {
            return !!this.editor.editorInstance && this.editor.editorInstance.getData();
        },
        set: function (value) {
            if (value !== this.value) {
                this.editor.data = value;
                this.stateChanges.next();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatCkeditorDirective.prototype, "empty", {
        get: function () {
            return !this.value || this.contentEmpty.includes(this.value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatCkeditorDirective.prototype, "shouldLabelFloat", {
        get: function () { return this.focused || !this.empty; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatCkeditorDirective.prototype, "disabled", {
        get: function () {
            return this.editor.disabled;
        },
        set: function (isDisabled) {
            this.editor.setDisabledState(isDisabled);
            this.stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    MatCkeditorDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.editor.blur.subscribe(function () {
            _this.focused = false;
            _this.stateChanges.next();
        });
        this.editor.focus.subscribe(function () {
            _this.focused = true;
            _this.stateChanges.next();
        });
    };
    MatCkeditorDirective.prototype.ngDoCheck = function () {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
    };
    MatCkeditorDirective.prototype.setDescribedByIds = function (ids) {
        this.describedBy = ids.join(' ');
    };
    MatCkeditorDirective.prototype.onContainerClick = function () {
        if (this.editor.editorInstance) {
            this.editor.editorInstance.editing.view.focus();
            this.stateChanges.next();
        }
    };
    var MatCkeditorDirective_1;
    /**
     * Implemented as part of MatFormFieldControl.
     * See https://material.angular.io/guide/creating-a-custom-form-field-control
     */
    MatCkeditorDirective.nextId = 0;
    MatCkeditorDirective.ctorParameters = function () { return [
        { type: CKEditorComponent, decorators: [{ type: Host }, { type: Self }, { type: Optional }] },
        { type: ViewContainerRef },
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
        { type: NgForm, decorators: [{ type: Optional }] },
        { type: FormGroupDirective, decorators: [{ type: Optional }] },
        { type: ErrorStateMatcher }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], MatCkeditorDirective.prototype, "value", null);
    __decorate([
        HostBinding(),
        __metadata("design:type", Object)
    ], MatCkeditorDirective.prototype, "id", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MatCkeditorDirective.prototype, "placeholder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], MatCkeditorDirective.prototype, "contentEmpty", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MatCkeditorDirective.prototype, "required", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], MatCkeditorDirective.prototype, "disabled", null);
    __decorate([
        HostBinding('attr.aria-invalid'),
        __metadata("design:type", Boolean)
    ], MatCkeditorDirective.prototype, "errorState", void 0);
    __decorate([
        Input(),
        __metadata("design:type", ErrorStateMatcher)
    ], MatCkeditorDirective.prototype, "errorStateMatcher", void 0);
    __decorate([
        HostBinding('attr.aria-describedby'),
        __metadata("design:type", Object)
    ], MatCkeditorDirective.prototype, "describedBy", void 0);
    MatCkeditorDirective = MatCkeditorDirective_1 = __decorate([
        Directive({
            selector: '[matCkeditor]',
            providers: [
                { provide: MatFormFieldControl, useExisting: MatCkeditorDirective_1 },
            ]
        }),
        __param(0, Host()), __param(0, Self()), __param(0, Optional()),
        __param(2, Optional()), __param(2, Self()),
        __param(3, Optional()),
        __param(4, Optional()),
        __metadata("design:paramtypes", [CKEditorComponent,
            ViewContainerRef,
            NgControl,
            NgForm,
            FormGroupDirective,
            ErrorStateMatcher])
    ], MatCkeditorDirective);
    return MatCkeditorDirective;
}(_MatInputMixinBase));
export { MatCkeditorDirective };
//# sourceMappingURL=data:application/json;base64,