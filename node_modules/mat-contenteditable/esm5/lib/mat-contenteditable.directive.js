import { __decorate, __extends, __metadata, __param } from "tslib";
import { Directive, ElementRef, Renderer2, HostListener, Input, HostBinding, Optional, Self, DoCheck, } from '@angular/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { ErrorStateMatcher, mixinErrorState, CanUpdateErrorStateCtor, CanUpdateErrorState } from '@angular/material/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Subject } from 'rxjs';
// Boilerplate for applying mixins to MatInput.
/** @docs-private */
var MatInputBase = /** @class */ (function () {
    function MatInputBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, 
    /** @docs-private */
    ngControl) {
        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngControl = ngControl;
    }
    return MatInputBase;
}());
export var _MatInputMixinBase = mixinErrorState(MatInputBase);
var MatContenteditableDirective = /** @class */ (function (_super) {
    __extends(MatContenteditableDirective, _super);
    function MatContenteditableDirective(elementRef, renderer, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher) {
        var _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.ngControl = ngControl;
        _this.stateChanges = new Subject();
        _this.id = "mat-input-" + MatContenteditableDirective_1.nextId++;
        _this.focused = false;
        _this.contentEmpty = ['<br>', '<div><br></div>'];
        _this._required = false;
        _this._disabled = false;
        _this.controlType = 'mat-input';
        _this.describedBy = '';
        _this.propValueAccessor = 'innerHTML';
        // Setting the value accessor directly (instead of using
        // the providers) to avoid running into a circular import.
        if (_this.ngControl != null) {
            _this.ngControl.valueAccessor = _this;
        }
        return _this;
    }
    MatContenteditableDirective_1 = MatContenteditableDirective;
    Object.defineProperty(MatContenteditableDirective.prototype, "value", {
        get: function () { return this.elementRef.nativeElement[this.propValueAccessor]; },
        set: function (value) {
            if (value !== this.value) {
                this.elementRef.nativeElement[this.propValueAccessor] = value;
                this.stateChanges.next();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatContenteditableDirective.prototype, "placeholder", {
        get: function () {
            return this._placeholder;
        },
        set: function (plh) {
            this._placeholder = plh;
            this.stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatContenteditableDirective.prototype, "empty", {
        get: function () {
            return !this.value || this.contentEmpty.includes(this.value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatContenteditableDirective.prototype, "shouldLabelFloat", {
        get: function () { return this.focused || !this.empty; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatContenteditableDirective.prototype, "required", {
        get: function () {
            return this._required;
        },
        set: function (req) {
            this._required = coerceBooleanProperty(req);
            this.stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatContenteditableDirective.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        set: function (dis) {
            this._disabled = coerceBooleanProperty(dis);
            this.stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    MatContenteditableDirective.prototype.ngDoCheck = function () {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
    };
    MatContenteditableDirective.prototype.callOnChange = function () {
        if (typeof this.onChange === 'function') {
            this.onChange(this.elementRef.nativeElement[this.propValueAccessor]);
        }
    };
    MatContenteditableDirective.prototype.callOnFocused = function () {
        if (this.focused !== true) {
            this.focused = true;
            this.stateChanges.next();
        }
    };
    MatContenteditableDirective.prototype.callOnTouched = function () {
        if (typeof this.onTouched === 'function') {
            this.onTouched();
        }
        if (this.focused !== false) {
            this.focused = false;
            this.stateChanges.next();
        }
    };
    MatContenteditableDirective.prototype.setDescribedByIds = function (ids) {
        this.describedBy = ids.join(' ');
    };
    MatContenteditableDirective.prototype.onContainerClick = function () { this.elementRef.nativeElement.focus(); };
    /**
     * Writes a new value to the element.
     * This method will be called by the forms API to write
     * to the view when programmatic (model -> view) changes are requested.
     *
     * See: [ControlValueAccessor](https://angular.io/api/forms/ControlValueAccessor#members)
     */
    MatContenteditableDirective.prototype.writeValue = function (value) {
        var normalizedValue = value == null ? '' : value;
        this.renderer.setProperty(this.elementRef.nativeElement, this.propValueAccessor, normalizedValue);
    };
    /**
     * Registers a callback function that should be called when
     * the control's value changes in the UI.
     *
     * This is called by the forms API on initialization so it can update
     * the form model when values propagate from the view (view -> model).
     */
    MatContenteditableDirective.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    /**
     * Registers a callback function that should be called when the control receives a blur event.
     * This is called by the forms API on initialization so it can update the form model on blur.
     */
    MatContenteditableDirective.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    /**
     * This function is called by the forms API when the control status changes to or from "DISABLED".
     * Depending on the value, it should enable or disable the appropriate DOM element.
     */
    MatContenteditableDirective.prototype.setDisabledState = function (isDisabled) {
        if (isDisabled) {
            this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'true');
            this.removeDisabledState = this.renderer.listen(this.elementRef.nativeElement, 'keydown', this.listenerDisabledState);
        }
        else {
            if (this.removeDisabledState) {
                this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');
                this.removeDisabledState();
            }
        }
    };
    MatContenteditableDirective.prototype.listenerDisabledState = function (e) {
        e.preventDefault();
    };
    var MatContenteditableDirective_1;
    /**
     * Implemented as part of MatFormFieldControl.
     * See https://material.angular.io/guide/creating-a-custom-form-field-control
     */
    MatContenteditableDirective.nextId = 0;
    MatContenteditableDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
        { type: NgForm, decorators: [{ type: Optional }] },
        { type: FormGroupDirective, decorators: [{ type: Optional }] },
        { type: ErrorStateMatcher }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], MatContenteditableDirective.prototype, "value", null);
    __decorate([
        HostBinding(),
        __metadata("design:type", Object)
    ], MatContenteditableDirective.prototype, "id", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], MatContenteditableDirective.prototype, "placeholder", null);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], MatContenteditableDirective.prototype, "contentEmpty", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], MatContenteditableDirective.prototype, "required", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], MatContenteditableDirective.prototype, "disabled", null);
    __decorate([
        HostBinding('attr.aria-invalid'),
        __metadata("design:type", Boolean)
    ], MatContenteditableDirective.prototype, "errorState", void 0);
    __decorate([
        Input(),
        __metadata("design:type", ErrorStateMatcher)
    ], MatContenteditableDirective.prototype, "errorStateMatcher", void 0);
    __decorate([
        HostBinding('attr.aria-describedby'),
        __metadata("design:type", Object)
    ], MatContenteditableDirective.prototype, "describedBy", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MatContenteditableDirective.prototype, "propValueAccessor", void 0);
    __decorate([
        HostListener('input'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], MatContenteditableDirective.prototype, "callOnChange", null);
    __decorate([
        HostListener('focus'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], MatContenteditableDirective.prototype, "callOnFocused", null);
    __decorate([
        HostListener('blur'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], MatContenteditableDirective.prototype, "callOnTouched", null);
    MatContenteditableDirective = MatContenteditableDirective_1 = __decorate([
        Directive({
            selector: '[contenteditable]',
            providers: [
                { provide: MatFormFieldControl, useExisting: MatContenteditableDirective_1 },
            ]
        }),
        __param(2, Optional()), __param(2, Self()),
        __param(3, Optional()),
        __param(4, Optional()),
        __metadata("design:paramtypes", [ElementRef,
            Renderer2,
            NgControl,
            NgForm,
            FormGroupDirective,
            ErrorStateMatcher])
    ], MatContenteditableDirective);
    return MatContenteditableDirective;
}(_MatInputMixinBase));
export { MatContenteditableDirective };
//# sourceMappingURL=data:application/json;base64,